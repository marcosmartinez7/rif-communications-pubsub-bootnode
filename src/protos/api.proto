syntax = "proto3";
package communicationsapi;


service CommunicationsApi {
    //Server side stream, there's no need for a bidirectional stream, it's only needed so
    //The client can be notified of events in their subscriptions
    rpc PingChannel (Void) returns (PongResponse);
    rpc ConnectToCommunicationsNode(Void) returns (stream Notification);
    rpc EndCommunication(Void) returns (Void);
    rpc Publish (PublishPayload) returns (Void);
    rpc Subscribe (Channel) returns (Void);
    rpc Unsubscribe (Channel) returns (Void);
    rpc GetSubscribers(Channel) returns (Subscribers);
    rpc HasSubscriber(Subscriber) returns (BooleanResponse);
}


message Channel {
    string channelId = 1;
}

/*RPC needs a message, so when there are no params to send, this empty message is used*/
message Void {}

message Notification {
    enum NotificationType {
        INVITATION_TO_ROOM = 0;
        INVITATION_TO_ROOM_RESPONSE = 1;
        AUTHENTICATION_REQUEST = 2;
        AUTHENTICATION_RESPONSE = 3;
        NEW_MESSAGE = 4;
        NEW_MESSAGE_RESPONSE = 5;
    }
    NotificationType type = 1;
    string message = 2;
}

message Subscribers {
    repeated string peerId = 2;
}

message Subscriber {
    string peerId = 1;
    Channel channel = 2;
}

message PongResponse {
    bool success = 1;
    string message = 2;
}

message BooleanResponse {
    bool payload = 1;
}

message PublishPayload {
    string topic = 1;
    bytes message = 2;
}

message Payload {
    string from = 1;
    optional string to = 2;
    bytes data  = 3;
    bytes seqno = 4;
    repeated string topicIDs = 5;
}


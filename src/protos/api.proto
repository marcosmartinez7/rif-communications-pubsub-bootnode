syntax = "proto3";
package communicationsapi;


service CommunicationsApi {
    //Server side stream, there's no need for a bidirectional stream, it's only needed so
    //The client can be notified of events in their subscriptions

    //Test the connection to the server, both the stream a the server response
    rpc PingChannel (Void) returns (PongResponse);

    //Open a data stream with the server, it can only receive messages
    rpc ConnectToCommunicationsNode(Void) returns (stream Notification);

    //Close the data stream
    rpc EndCommunication(Void) returns (Void);

    //Publish a message in a channel
    rpc Publish (PublishPayload) returns (Void);

    //Subscribe to a channel
    rpc Subscribe (Channel) returns (Void);

    //Unsubscribe to a channel
    rpc Unsubscribe (Channel) returns (Void);

    //Get the subscribers of a participating channel
    rpc GetSubscribers(Channel) returns (Subscribers);

    //Query if a subscriber exists in a participating channel
    rpc HasSubscriber(Subscriber) returns (BooleanResponse);
    
    //Send a direct message to a peer
    rpc SendMessage(DirectMsgPayload) returns (Void);
}

/*Types of notifications that can be sent by the server, the type of notification
can be used to know how to parse the received message in case the format of the payload 
is not a self-describing message (JSON would be self-describing)*/
enum NotificationType {
    //You've received a new direct message from a peer
    NEW_DIRECT_MESSAGE = 0;

    //You've received new data from a subscribed channel
    NEW_DATA_FROM_SUBSCRIPTION = 1;

    //Used by the server to notify about internal events
    SERVER_NOTIFICATION = 2;
}

//The topic
message Channel {
    string channelId = 1;
}

/*RPC needs a message, so when there are no params to send, this empty message is used*/
message Void {}

/*The unidirectional stream from the server only sends these kind of messages*/
message Notification {
    NotificationType type = 1;
    Msg message = 2;
}

//The message payload has no restrictions, the applications can model it as fits best.
message Msg {
    bytes payload = 1;
}

// Set of peerIDs subscribed to a specific channel
message Subscribers {
    repeated string peerId = 1;
}

//Information mapping a user to a channel subscription
message Subscriber {
    string peerId = 1;
    Channel channel = 2;
}

//A simple message format to define a boolean response
message BooleanResponse {
    bool value = 1;
}


//Message used to publish a message in a specific topic
message PublishPayload {
    Channel topic = 1;
    Msg message = 2;
}

/*Message used to send a message to a specific peer.
from: PeerId of the author of the message contents
If from is not defined, then the node's peerId will be used

to: PeerId of the intended recipient of the message

message: The actual contents of the message
*/
message DirectMsgPayload {
    optional string from = 1;
    string to = 2;
    Msg message = 3;
}



//Only used for the PingChannel test. It has no other valuable use.
message PongResponse {
    bool success = 1;
    string message = 2;
}

